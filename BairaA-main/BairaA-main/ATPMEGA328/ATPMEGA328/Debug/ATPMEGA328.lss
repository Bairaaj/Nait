
ATPMEGA328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc7  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4b  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000656  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000419  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e5       	ldi	r30, 0x5E	; 94
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 31       	cpi	r26, 0x11	; 17
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  ea:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SCI0_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "sci.h"

int SCI0_Init (unsigned long ulBus, unsigned long ulBAUD, int bRXInt)
{
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
	// determine the BAUD rate divisor required
	unsigned int iReg = (unsigned int)((((ulBus * 10 / 16) / ulBAUD) + 5) / 10) - 1;
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24
 102:	cc 0c       	add	r12, r12
 104:	dd 1c       	adc	r13, r13
 106:	ee 1c       	adc	r14, r14
 108:	ff 1c       	adc	r15, r15
 10a:	d7 01       	movw	r26, r14
 10c:	c6 01       	movw	r24, r12
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	8c 0d       	add	r24, r12
 120:	9d 1d       	adc	r25, r13
 122:	ae 1d       	adc	r26, r14
 124:	bf 1d       	adc	r27, r15
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	68 94       	set
 12c:	13 f8       	bld	r1, 3
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	77 95       	ror	r23
 134:	67 95       	ror	r22
 136:	16 94       	lsr	r1
 138:	d1 f7       	brne	.-12     	; 0x12e <SCI0_Init+0x3c>
 13a:	0e 94 8b 01 	call	0x316	; 0x316 <__udivmodsi4>
 13e:	ca 01       	movw	r24, r20
 140:	b9 01       	movw	r22, r18
 142:	6b 5f       	subi	r22, 0xFB	; 251
 144:	7f 4f       	sbci	r23, 0xFF	; 255
 146:	8f 4f       	sbci	r24, 0xFF	; 255
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	2a e0       	ldi	r18, 0x0A	; 10
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	0e 94 8b 01 	call	0x316	; 0x316 <__udivmodsi4>
 156:	21 50       	subi	r18, 0x01	; 1
 158:	31 09       	sbc	r19, r1

	// won't fit in register
	if (iReg > 0b111111111111u)
 15a:	21 15       	cp	r18, r1
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	38 07       	cpc	r19, r24
 160:	c8 f4       	brcc	.+50     	; 0x194 <SCI0_Init+0xa2>
	return -1;

	// start code will power off all modules...
	// ensure power is on : USART
	PRR0 &= 0b11111101;
 162:	e4 e6       	ldi	r30, 0x64	; 100
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8d 7f       	andi	r24, 0xFD	; 253
 16a:	80 83       	st	Z, r24

	// set BAUD rate
	UBRR0H = iReg >> 8;
 16c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)iReg;
 170:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// enable TX and RX
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// async, no parity, 1 stop bit, 8 bit
	UCSR0C =  0b00000110;
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

  // optional interrupt on receiver
  if (bRXInt)
 180:	01 2b       	or	r16, r17
 182:	59 f0       	breq	.+22     	; 0x19a <SCI0_Init+0xa8>
    UCSR0B |= (1 << RXCIE0);
 184:	e1 ec       	ldi	r30, 0xC1	; 193
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	80 83       	st	Z, r24

	// no error
	return 0;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	05 c0       	rjmp	.+10     	; 0x19e <SCI0_Init+0xac>
	// determine the BAUD rate divisor required
	unsigned int iReg = (unsigned int)((((ulBus * 10 / 16) / ulBAUD) + 5) / 10) - 1;

	// won't fit in register
	if (iReg > 0b111111111111u)
	return -1;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	02 c0       	rjmp	.+4      	; 0x19e <SCI0_Init+0xac>
  // optional interrupt on receiver
  if (bRXInt)
    UCSR0B |= (1 << RXCIE0);

	// no error
	return 0;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
}
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <SCI0_BSend>:

void SCI0_BSend (unsigned char data)
{
	// transmit buffer empty?
	while (!(UCSR0A & (1<<UDRE0)))
 1ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b0:	95 ff       	sbrs	r25, 5
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <SCI0_BSend>
	;

	// transmit complete must be cleared before send in polling mode
	if (UCSR0A & (1<<TXC0))
 1b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b8:	96 ff       	sbrs	r25, 6
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <SCI0_BSend+0x16>
	UCSR0A = (1<<TXC0);
 1bc:	90 e4       	ldi	r25, 0x40	; 64
 1be:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	// free to send data
	UDR0 = data;
 1c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c6:	08 95       	ret

000001c8 <SCI0_TxString>:
	if (tl)
		SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
	while (*buff)
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <SCI0_TxString+0xe>
	{
		SCI0_BSend(*buff);
 1d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <SCI0_BSend>
		++buff;
 1d4:	21 96       	adiw	r28, 0x01	; 1
		SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
	while (*buff)
 1d6:	88 81       	ld	r24, Y
 1d8:	81 11       	cpse	r24, r1
 1da:	fa cf       	rjmp	.-12     	; 0x1d0 <SCI0_TxString+0x8>
	{
		SCI0_BSend(*buff);
		++buff;
	}
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <Timer_Init>:
 1e2:	e4 e6       	ldi	r30, 0x64	; 100
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
 1e8:	97 7f       	andi	r25, 0xF7	; 247
 1ea:	90 83       	st	Z, r25
 1ec:	e1 e8       	ldi	r30, 0x81	; 129
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	10 82       	st	Z, r1
 1f2:	90 81       	ld	r25, Z
 1f4:	89 2b       	or	r24, r25
 1f6:	80 83       	st	Z, r24
 1f8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1fc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 200:	68 0f       	add	r22, r24
 202:	79 1f       	adc	r23, r25
 204:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 208:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 212:	08 95       	ret

00000214 <Timer_F_PWM0>:
 214:	e4 e6       	ldi	r30, 0x64	; 100
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	90 81       	ld	r25, Z
 21a:	9f 7d       	andi	r25, 0xDF	; 223
 21c:	90 83       	st	Z, r25
 21e:	81 11       	cpse	r24, r1
 220:	14 c0       	rjmp	.+40     	; 0x24a <Timer_F_PWM0+0x36>
 222:	41 11       	cpse	r20, r1
 224:	03 c0       	rjmp	.+6      	; 0x22c <Timer_F_PWM0+0x18>
 226:	83 e8       	ldi	r24, 0x83	; 131
 228:	84 bd       	out	0x24, r24	; 36
 22a:	02 c0       	rjmp	.+4      	; 0x230 <Timer_F_PWM0+0x1c>
 22c:	83 ec       	ldi	r24, 0xC3	; 195
 22e:	84 bd       	out	0x24, r24	; 36
 230:	65 bd       	out	0x25, r22	; 37
 232:	8f e7       	ldi	r24, 0x7F	; 127
 234:	87 bd       	out	0x27, r24	; 39
 236:	8a b1       	in	r24, 0x0a	; 10
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	8a b9       	out	0x0a, r24	; 10
 23c:	23 2b       	or	r18, r19
 23e:	29 f0       	breq	.+10     	; 0x24a <Timer_F_PWM0+0x36>
 240:	ee e6       	ldi	r30, 0x6E	; 110
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
 24a:	08 95       	ret

0000024c <main>:
volatile unsigned char _PWM_DutyVal = 0;


int main(void)
{
	SCI0_Init(F_CPU, 9600, 0);
 24c:	00 e0       	ldi	r16, 0x00	; 0
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	20 e8       	ldi	r18, 0x80	; 128
 252:	35 e2       	ldi	r19, 0x25	; 37
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	60 e8       	ldi	r22, 0x80	; 128
 25a:	74 e8       	ldi	r23, 0x84	; 132
 25c:	8e e1       	ldi	r24, 0x1E	; 30
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 79 00 	call	0xf2	; 0xf2 <SCI0_Init>
	

	SCI0_TxString("\n328 Up! PWM!\n");
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SCI0_TxString>
	
	//Timer_Init2(Timer_Prescale_8, _Timer_OC_Offset); // 1ms intervals
	Timer_Init(Timer_Prescale_8, _Timer_OC_Offset);
 26c:	6a ef       	ldi	r22, 0xFA	; 250
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Timer_Init>
	// bring up pwm (debug)
	//Timer_F_PWM1(Timer_PWM_Channel_OC3B, Timer_PWM_ClockSel_Div64, Timer_PWM_Pol_NonInverting, 1);
	
	Timer_F_PWM0(Timer_PWM_Channel_OC0A, Timer_PWM_ClockSel_Div64, Timer_PWM_Pol_NonInverting, 1);
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 0a 01 	call	0x214	; 0x214 <Timer_F_PWM0>
	
	
	
	sleep_enable();
 284:	83 b7       	in	r24, 0x33	; 51
 286:	81 60       	ori	r24, 0x01	; 1
 288:	83 bf       	out	0x33, r24	; 51
	sei();
 28a:	78 94       	sei
    /* Replace with your application code */

	DDRC &= (~0b00000001);
 28c:	87 b1       	in	r24, 0x07	; 7
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	87 b9       	out	0x07, r24	; 7
	
	DDRD |= 1 << PORTD3; // make portd pin 7 an output (PD7)
 292:	8a b1       	in	r24, 0x0a	; 10
 294:	88 60       	ori	r24, 0x08	; 8
 296:	8a b9       	out	0x0a, r24	; 10
	DDRD |= 1 << PORTD4; // make portd pin 7 an output (PD7)
 298:	8a b1       	in	r24, 0x0a	; 10
 29a:	80 61       	ori	r24, 0x10	; 16
 29c:	8a b9       	out	0x0a, r24	; 10
	
	PORTD |= (1 <<PORTD4);
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	80 61       	ori	r24, 0x10	; 16
 2a2:	8b b9       	out	0x0b, r24	; 11

    while (1)
	{
		if((PINC & (1 << PINC0)) == 0)
 2a4:	30 99       	sbic	0x06, 0	; 6
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <main+0x6a>
		{
			//Turn off LED
			PORTD &= ~(1 <<PORTD3);
 2a8:	8b b1       	in	r24, 0x0b	; 11
 2aa:	87 7f       	andi	r24, 0xF7	; 247
 2ac:	8b b9       	out	0x0b, r24	; 11
			_PWM_DutyVal = 30;
 2ae:	8e e1       	ldi	r24, 0x1E	; 30
 2b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 2b4:	f7 cf       	rjmp	.-18     	; 0x2a4 <main+0x58>
		}
		else
		{
			//Turn on LED
			PORTD |= (1 <<PORTD3);
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	88 60       	ori	r24, 0x08	; 8
 2ba:	8b b9       	out	0x0b, r24	; 11
			_PWM_DutyVal = 70;
 2bc:	86 e4       	ldi	r24, 0x46	; 70
 2be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 2c2:	f0 cf       	rjmp	.-32     	; 0x2a4 <main+0x58>

000002c4 <__vector_11>:
		}
    }
}

ISR(TIMER1_COMPA_vect)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	// rearm the output compare operation
	OCR1A += _Timer_OC_Offset; // 1ms intervals
 2d6:	e8 e8       	ldi	r30, 0x88	; 136
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	91 81       	ldd	r25, Z+1	; 0x01
 2de:	86 50       	subi	r24, 0x06	; 6
 2e0:	9f 4f       	sbci	r25, 0xFF	; 255
 2e2:	91 83       	std	Z+1, r25	; 0x01
 2e4:	80 83       	st	Z, r24
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_16>:

ISR (TIMER0_OVF_vect)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
	OCR0A = _PWM_DutyVal;
 304:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 308:	87 bd       	out	0x27, r24	; 39
}
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__udivmodsi4>:
 316:	a1 e2       	ldi	r26, 0x21	; 33
 318:	1a 2e       	mov	r1, r26
 31a:	aa 1b       	sub	r26, r26
 31c:	bb 1b       	sub	r27, r27
 31e:	fd 01       	movw	r30, r26
 320:	0d c0       	rjmp	.+26     	; 0x33c <__udivmodsi4_ep>

00000322 <__udivmodsi4_loop>:
 322:	aa 1f       	adc	r26, r26
 324:	bb 1f       	adc	r27, r27
 326:	ee 1f       	adc	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	a2 17       	cp	r26, r18
 32c:	b3 07       	cpc	r27, r19
 32e:	e4 07       	cpc	r30, r20
 330:	f5 07       	cpc	r31, r21
 332:	20 f0       	brcs	.+8      	; 0x33c <__udivmodsi4_ep>
 334:	a2 1b       	sub	r26, r18
 336:	b3 0b       	sbc	r27, r19
 338:	e4 0b       	sbc	r30, r20
 33a:	f5 0b       	sbc	r31, r21

0000033c <__udivmodsi4_ep>:
 33c:	66 1f       	adc	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	88 1f       	adc	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	1a 94       	dec	r1
 346:	69 f7       	brne	.-38     	; 0x322 <__udivmodsi4_loop>
 348:	60 95       	com	r22
 34a:	70 95       	com	r23
 34c:	80 95       	com	r24
 34e:	90 95       	com	r25
 350:	9b 01       	movw	r18, r22
 352:	ac 01       	movw	r20, r24
 354:	bd 01       	movw	r22, r26
 356:	cf 01       	movw	r24, r30
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
